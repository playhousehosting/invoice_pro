generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String?
  email         String      @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole    @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  preferences   Json?
  Business      Business[]
  SavedList     SavedList[]
}

model BlogPost {
  id        String   @id
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Business {
  id              String    @id
  name            String
  description     String?
  address         String
  city            String
  province        String
  postalCode      String
  phone           String?
  email           String?
  website         String?
  latitude        Float?
  longitude       Float?
  businessType    String[]
  canadianOwned   Boolean   @default(false)
  verified        Boolean   @default(false)
  featured        Boolean   @default(false)
  instagramHandle String?
  instagramToken  String?
  tokenExpiresAt  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  ownerId         String
  User            User      @relation(fields: [ownerId], references: [id])
  Product         Product[]
}

model CronLog {
  id          String   @id
  jobName     String
  status      String
  details     String?
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
}

model Product {
  id                   String               @id
  name                 String
  description          String?              @default("")
  price                Float
  barcode              String?              @unique @default("")
  imageUrl             String?              @default("")
  madeInCanada         Boolean              @default(false)
  productOfCanada      Boolean              @default(false)
  sourceUrl            String?
  sourceName           String
  lastChecked          DateTime             @default(now())
  businessId           String?
  categories           String[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  nameEmbedding        Float[]
  descriptionEmbedding Float[]
  categoryEmbedding    Float[]
  Business             Business?            @relation(fields: [businessId], references: [id])
  ProductToSavedList   ProductToSavedList[]

  @@index([categories])
  @@index([madeInCanada])
  @@index([name])
  @@index([productOfCanada])
}

model SavedList {
  id                 String               @id
  name               String
  userId             String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  User               User                 @relation(fields: [userId], references: [id])
  ProductToSavedList ProductToSavedList[]
}

model ProductToSavedList {
  A         String
  B         String
  Product   Product   @relation(fields: [A], references: [id], onDelete: Cascade)
  SavedList SavedList @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_ProductToSavedList_AB_pkey")
  @@index([B], map: "_ProductToSavedList_B_index")
  @@map("_ProductToSavedList")
}

model favorites {
  id              Int       @id @default(autoincrement())
  user_id         Int
  facility_id     String    @db.VarChar
  facility_type   String?   @db.VarChar(50)
  location_choice String?   @db.VarChar(100)
  added_at        DateTime? @default(now()) @db.Timestamptz(6)
  users           users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, facility_id], map: "_user_facility_uc")
  @@index([facility_id], map: "ix_favorites_facility_id")
  @@index([id], map: "ix_favorites_id")
}

model users {
  id            Int         @id @default(autoincrement())
  username      String      @unique(map: "ix_users_username") @db.VarChar
  password_hash String      @db.VarChar
  email         String?     @unique(map: "ix_users_email") @db.VarChar
  created_at    DateTime?   @default(now()) @db.Timestamptz(6)
  favorites     favorites[]

  @@index([id], map: "ix_users_id")
}

enum UserRole {
  USER
  ADMIN
}
